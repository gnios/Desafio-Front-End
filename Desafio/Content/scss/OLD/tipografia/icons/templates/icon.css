/* Generated by grunt-webfont */

<% if (fontfaceStyles) { %>@font-face {
	font-family:"<%= fontBaseName %>";<% if (fontSrc1) { %>
	src:<%= fontSrc1 %>;<% }%>
	src:<%= fontSrc2 %>;
	font-weight:normal;
	font-style:normal;
}
<% } %>
.<%= baseClass %> {
	font-family:"<%= fontBaseName %>";
	display:inline-block;
	font-weight:normal;
	font-style:normal;
	speak:none;
	text-decoration:inherit;
	text-transform:none;
	text-rendering:optimizeLegibility;
	-webkit-font-smoothing:antialiased;
	-moz-osx-font-smoothing:grayscale;
}

/* makes the font 33% larger relative to the icon container */


.<%= baseClass %>-ul {
  padding-left: 0;
  margin-left: 2.14285714em;
  list-style-type: none;
}
.<%= baseClass %>-ul > li {
  position: relative;
}
.<%= baseClass %>-li {
  position: absolute;
  left: -2.14285714em;
  width: 2.14285714em;
  top: 0.14285714em;
  text-align: center;
}
.<%= baseClass %>-li.<%= baseClass %>-lg {
  left: -1.85714286em;
}
.<%= baseClass %>-border {
  padding: .2em .25em .15em;
  border: solid 0.08em #eeeeee;
  border-radius: .1em;
}
.<%= baseClass %>-pull-left {
  float: left;
}
.<%= baseClass %>-pull-right {
  float: right;
}
.<%= baseClass %>.<%= baseClass %>-pull-left {
  margin-right: .3em;
}
.<%= baseClass %>.<%= baseClass %>-pull-right {
  margin-left: .3em;
}
/* Deprecated as of 4.4.0 */
.pull-right {
  float: right;
}
.pull-left {
  float: left;
}
.<%= baseClass %>.pull-left {
  margin-right: .3em;
}
.<%= baseClass %>.pull-right {
  margin-left: .3em;
}
.<%= baseClass %>.spin {
  -webkit-animation: spin 2s infinite linear;
  animation: spin 2s infinite linear;
}
.<%= baseClass %>.pulse {
  -webkit-animation: spin 1s infinite steps(8);
  animation: spin 1s infinite steps(8);
}
@-webkit-keyframes spin {
  0% {
	-webkit-transform: rotate(0deg);
	transform: rotate(0deg);
  }
  100% {
	-webkit-transform: rotate(359deg);
	transform: rotate(359deg);
  }
}
@keyframes spin {
  0% {
	-webkit-transform: rotate(0deg);
	transform: rotate(0deg);
  }
  100% {
	-webkit-transform: rotate(359deg);
	transform: rotate(359deg);
  }
}
.<%= baseClass %>.rotate-90 {
  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1);
  -webkit-transform: rotate(90deg);
  -ms-transform: rotate(90deg);
  transform: rotate(90deg);
}
.<%= baseClass %>.rotate-180 {
  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2);
  -webkit-transform: rotate(180deg);
  -ms-transform: rotate(180deg);
  transform: rotate(180deg);
}
.<%= baseClass %>.rotate-270 {
  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3);
  -webkit-transform: rotate(270deg);
  -ms-transform: rotate(270deg);
  transform: rotate(270deg);
}
.<%= baseClass %>.flip-horizontal {
  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1);
  -webkit-transform: scale(-1, 1);
  -ms-transform: scale(-1, 1);
  transform: scale(-1, 1);
}
.<%= baseClass %>.flip-vertical {
  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1);
  -webkit-transform: scale(1, -1);
  -ms-transform: scale(1, -1);
  transform: scale(1, -1);
}
:root .<%= baseClass %>.rotate-90,
:root .<%= baseClass %>.rotate-180,
:root .<%= baseClass %>.rotate-270,
:root .<%= baseClass %>.flip-horizontal,
:root .<%= baseClass %>.flip-vertical {
  filter: none;
}
.<%= baseClass %>.stack {
  position: relative;
  display: inline-block;
  width: 2em;
  height: 2em;
  line-height: 2em;
  vertical-align: middle;
}
.<%= baseClass %>.stack-1x,
.<%= baseClass %>.stack-2x {
  position: absolute;
  left: 0;
  width: 100%;
  text-align: center;
}
.<%= baseClass %>.stack-1x {
  line-height: inherit;
}
.<%= baseClass %>.stack-2x {
  font-size: 2em;
}
.<%= baseClass %>.inverse {
  color: #ffffff;
}

<% if (iconsStyles) { %>/* Vars */<% for (var glyphIdx = 0; glyphIdx < glyphs.length; glyphIdx++) { %>
<% if (stylesheet === 'scss') { %>
$<%= classPrefix %>var-<%= glyphs[glyphIdx] %>:"<% if (addLigatures) { %><%= glyphs[glyphIdx] %><% } else { %>\<%= codepoints[glyphIdx] %><% } %>";
<% } } } %>

<% if (iconsStyles) { %>/* Icons */<% for (var glyphIdx = 0; glyphIdx < glyphs.length; glyphIdx++) { %>
<% if (stylesheet === 'less') { %>
.<%= mixinPrefix %><%= glyphs[glyphIdx] %>() {
	&:before {
		content:"<% if (addLigatures) { %><%= glyphs[glyphIdx] %><% } else { %>\<%= codepoints[glyphIdx] %><% } %>";
	}
	<% if (ie7) {%>
	*zoom: expression( this.runtimeStyle['zoom'] = '1', this.innerHTML = '&#x<%= codepoints[glyphIdx] %>;');
	<% } %>
}
.<%= baseClass %>.<%= glyphs[glyphIdx] %>{
 	.<%= mixinPrefix %><%= glyphs[glyphIdx] %>();
}<% } else { %>
<% if (ie7) {%>.<%= glyphs[glyphIdx] %> {
	*zoom: expression( this.runtimeStyle['zoom'] = '1', this.innerHTML = '&#x<%= codepoints[glyphIdx] %>;');
}
<% } %>
.<%= baseClass %>.<%= glyphs[glyphIdx] %>:before {
	content:"<% if (addLigatures) { %><%= glyphs[glyphIdx] %><% } else { %>\<%= codepoints[glyphIdx] %><% } %>";
}<% } } } %>